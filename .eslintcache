[{"C:\\Users\\Valen\\Desktop\\borrar\\ProyectoLogica\\src\\index.js":"1","C:\\Users\\Valen\\Desktop\\borrar\\ProyectoLogica\\src\\Game.js":"2","C:\\Users\\Valen\\Desktop\\borrar\\ProyectoLogica\\src\\Square.js":"3","C:\\Users\\Valen\\Desktop\\borrar\\ProyectoLogica\\src\\PengineClient.js":"4","C:\\Users\\Valen\\Desktop\\borrar\\ProyectoLogica\\src\\Board.js":"5"},{"size":186,"mtime":1719446247533,"results":"6","hashOfConfig":"7"},{"size":8811,"mtime":1719446247531,"results":"8","hashOfConfig":"7"},{"size":395,"mtime":1719446247531,"results":"9","hashOfConfig":"7"},{"size":2276,"mtime":1719446247531,"results":"10","hashOfConfig":"7"},{"size":871,"mtime":1719446247529,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"ujybqd",{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\Valen\\Desktop\\borrar\\ProyectoLogica\\src\\index.js",[],["24","25"],"C:\\Users\\Valen\\Desktop\\borrar\\ProyectoLogica\\src\\Game.js",["26","27","28"],"import React from 'react';\r\nimport PengineClient from './PengineClient';\r\nimport Board from './Board';\r\nimport Square from './Square';\r\nimport { useState } from 'react/cjs/react.production.min';\r\nimport userEvent from '@testing-library/user-event';\r\nimport swal from 'sweetalert';\r\n\r\n/**\r\n * List of colors.\r\n */\r\n\r\nconst colors = [\"r\", \"v\", \"p\", \"g\", \"b\", \"y\"];  // red, violet, pink, green, blue, yellow\r\n\r\n/**\r\n * Returns the CSS representation of the received color.\r\n */\r\n\r\nexport function colorToCss(color) {\r\n  switch (color) {\r\n    case \"r\": return \"#f38630\";\r\n    case \"v\": return \"#67917a\";\r\n    case \"p\": return \"#170409\";\r\n    case \"g\": return \"#b8af03\";\r\n    case \"b\": return \"#ccbf82\";\r\n    case \"y\": return \"#e33258\";\r\n  }\r\n  return color;\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n  pengine;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      origin: undefined,\r\n      turns: 0,\r\n      grid: null,\r\n      complete: false,  // true if game is complete, false otherwise\r\n      waiting: false,\r\n      movements: [],\r\n      adyacentes: [],\r\n      cantCapturadosAyuda: undefined,\r\n      capturadosAyuda: [],\r\n      colorAyuda: undefined\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.onOriginSelected = this.onOriginSelected.bind(this);\r\n    this.handlePengineCreate = this.handlePengineCreate.bind(this);\r\n    this.pengine = new PengineClient(this.handlePengineCreate);\r\n  }\r\n\r\n  handlePengineCreate() {\r\n    const queryS = 'init(Grid),adyCStar([0,0],Grid,ListaAdyacentes)';    \r\n    this.pengine.query(queryS, (success, response) => {\r\n      if (success) {\r\n        this.setState({\r\n          grid: response['Grid'],\r\n          adyacentes: response['ListaAdyacentes']\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  handleClick(color) {\r\n    // No action on click if game is complete or we are waiting.\r\n    this.state.movements.push(color);\r\n\r\n    if (this.state.complete || this.state.waiting) {\r\n      return;\r\n    }\r\n    // Build Prolog query to apply the color flick.\r\n    // The query will be like:\r\n    // flick([[g,g,b,g,v,y,p,v,b,p,v,p,v,r],\r\n    //        [r,r,p,p,g,v,v,r,r,b,g,v,p,r],\r\n    //        [b,v,g,y,b,g,r,g,p,g,p,r,y,y],\r\n    //        [r,p,y,y,y,p,y,g,r,g,y,v,y,p],\r\n    //        [y,p,y,v,y,g,g,v,r,b,v,y,r,g],\r\n    //        [r,b,v,g,b,r,y,p,b,p,y,r,y,y],\r\n    //        [p,g,v,y,y,r,b,r,v,r,v,y,p,y],\r\n    //        [b,y,v,g,r,v,r,g,b,y,b,y,p,g],\r\n    //        [r,b,b,v,g,v,p,y,r,v,r,y,p,g],\r\n    //        [v,b,g,v,v,r,g,y,b,b,b,b,r,y],\r\n    //        [v,v,b,r,p,b,g,g,p,p,b,y,v,p],\r\n    //        [r,p,g,y,v,y,r,b,v,r,b,y,r,v],\r\n    //        [r,b,b,v,p,y,p,r,b,g,p,y,b,r],\r\n    //        [v,g,p,b,v,v,g,g,g,b,v,g,g,g]],r, Grid)\r\n    const gridS = JSON.stringify(this.state.grid).replaceAll('\"', \"\");\r\n    const Fila = !this.state.origin ? 0: this.state.origin[0];\r\n    const Columna = !this.state.origin ? 0 :this.state.origin[1];\r\n    if(!this.state.origin){\r\n      this.setState({\r\n        origin:[0,0]\r\n      });\r\n    }\r\n    const queryS = \"flick(\" + gridS +\",\"+ Fila +\",\"+ Columna +\",\"+ color +\",Grid, ListaAdyacentes)\";\r\n    this.setState({\r\n      waiting: true\r\n    });\r\n    this.pengine.query(queryS, (success, response) => {\r\n      if (success) {\r\n        this.setState({\r\n          grid: response['Grid'],\r\n          turns: this.state.turns + 1,\r\n          adyacentes: response['ListaAdyacentes'],\r\n          waiting: false,\r\n        });\r\n        if(this.state.adyacentes.length === 196){\r\n          this.setState({\r\n            complete: true,\r\n          })\r\n          this.mostrarAlerta();\r\n        }\r\n      } else {\r\n        // Prolog query will fail when the clicked color coincides with that in the top left cell.\r\n        this.setState({\r\n          waiting: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  mostrarAlerta=()=>{\r\n    swal({\r\n      title: \"¡¡Enhorabuena!! Has ganado\",\r\n      text: \"Terminaste el juego en \"+this.state.turns+\" turnos, eres un capo bien ahí UwU ;)\",\r\n      buttons: {\r\n        restart: {\r\n          text: \"Volver a intentarlo\",\r\n          value: \"restart\",\r\n        },\r\n      },\r\n    })\r\n    .then((value) => {\r\n      if (value===\"restart\"){\r\n        window.location.reload()\r\n      }\r\n        });\r\n  }\r\n  \r\n//adyCStar([F,C],FGrid,ListaAdyacentes).\r\n  onOriginSelected(pos){\r\n    this.setState({\r\n      origin:pos\r\n    })\r\n    const gridS = JSON.stringify(this.state.grid).replaceAll('\"', \"\");\r\n    const Fila = pos[0];\r\n    const Columna = pos[1];\r\n    const queryS = \"adyCStar([\"+Fila+\",\"+Columna+\"],\"+gridS+\",ListaAdyacentes)\";\r\n    this.pengine.query(queryS, (success,response)=>{\r\n      if(success){\r\n        this.setState({\r\n          adyacentes: response['ListaAdyacentes']\r\n        })\r\n      }\r\n    });\r\n  }\r\n\r\n  ayuda(profundidad){\r\n    //mejorCamino([F,C],Grid,Profundidad,Resultado):- \r\n    const gridS = JSON.stringify(this.state.grid).replaceAll('\"', \"\"); \r\n    const Fila = !this.state.origin ? 0: this.state.origin[0];\r\n    const Columna = !this.state.origin ? 0 :this.state.origin[1];\r\n    const queryS = \"mejorCamino([\"+Fila+\",\"+Columna+\"],\"+gridS+\",\"+profundidad+\",Resultado,CantCapt)\";\r\n    this.setState({\r\n      waiting: true\r\n    });\r\n    this.pengine.query(queryS, (success,response)=>{\r\n      if(success){\r\n        this.setState({\r\n          cantCapturadosAyuda: response['CantCapt'],\r\n          capturadosAyuda: response['Resultado'],\r\n          waiting: false,\r\n        })\r\n      }\r\n    });    \r\n  }\r\n\r\n\r\n  ayudaParcial(){    \r\n    const gridS = JSON.stringify(this.state.grid).replaceAll('\"', \"\"); \r\n    const Fila = !this.state.origin ? 0: this.state.origin[0];\r\n    const Columna = !this.state.origin ? 0 :this.state.origin[1];\r\n    const queryS = \"encontraUnCamino([\"+Fila+\",\"+Columna+\"],\"+gridS+\",ResultadoColor)\";\r\n    this.setState({\r\n      waiting: true\r\n    });\r\n    this.pengine.query(queryS, (success,response)=>{\r\n      \r\n      if(success){\r\n        this.setState({\r\n          colorAyuda : response['ResultadoColor'],                   \r\n          waiting: false,\r\n        })        \r\n      }\r\n      this.handleClick(this.state.colorAyuda);\r\n    }); \r\n\r\n  }\r\n\r\n\r\n  render() {\r\n    if (this.state.grid === null) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div className='Conteiner'>\r\n      <div className=\"game\">\r\n        <div className=\"leftPanel\">\r\n          <div className=\"buttonsPanel\">\r\n            {colors.map(color =>\r\n              <button\r\n                className=\"colorBtn\"\r\n                style={{ backgroundColor: colorToCss(color) }}\r\n                onClick={() => this.handleClick(color)}              \r\n                key={color}\r\n              />)}\r\n          </div>\r\n          <div className=\"turnsPanel\">\r\n            <div className=\"turnsLab\">Turnos</div>\r\n            <div className=\"turnsNum\">{this.state.turns}</div>\r\n          </div>             \r\n          <div className='capturedPanel'>\r\n              <div className='capturedLab'>Capturados</div>\r\n              <div className='capturedNum'>{this.state.adyacentes.length}</div>\r\n          </div>          \r\n          <div className='GreedyButton'>\r\n            <button type='button' onClick={() => this.ayudaParcial()}>Ayuda Greedy</button>\r\n          </div>\r\n        </div>\r\n        <Board \r\n          grid={this.state.grid}\r\n          onOriginSelected = {!this.state.origin ? this.onOriginSelected : undefined} \r\n          origin={this.state.origin}\r\n        />\r\n        <div className='rightPanel'>\r\n          <div className='PEinput'>\r\n            <input placeholder='PE' type=\"number\" id=\"Profundidad\" name=\"profundidad\" min=\"1\" max=\"10\"></input>\r\n          </div>\r\n          <div className='PEbutton'>\r\n            <button type='button' onClick={() => this.ayuda(document.getElementById(\"Profundidad\").value)}>Ayuda Estrategica!</button>\r\n          </div>\r\n          <div className='resultAyuda'>\r\n          <div className='capturedAyuda'>Total capturados ayuda: {this.state.cantCapturadosAyuda}</div>\r\n          <div className='ayudaAux'>Secuencia de Ayuda</div>\r\n              <div className='secuencia'>\r\n              {this.state.capturadosAyuda.map((colors, i) =>\r\n              <Square \r\n                value={colors}\r\n                key={i}\r\n                className={\"movementSquare\"}\r\n              />\r\n              )}</div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n      <div className='movementsPanel'>\r\n            <div className='movementsAux'>Historial</div>\r\n            <div className='movements'> \r\n            {this.state.movements.map((colors, i) =>\r\n              <Square \r\n                value={colors}\r\n                key={i}\r\n                className={\"movementSquare\"}\r\n              />\r\n              )}\r\n            </div>\r\n          </div>\r\n      </div>\r\n\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","C:\\Users\\Valen\\Desktop\\borrar\\ProyectoLogica\\src\\Square.js",[],"C:\\Users\\Valen\\Desktop\\borrar\\ProyectoLogica\\src\\PengineClient.js",[],"C:\\Users\\Valen\\Desktop\\borrar\\ProyectoLogica\\src\\Board.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":5,"column":10,"nodeType":"35","messageId":"36","endLine":5,"endColumn":18},{"ruleId":"33","severity":1,"message":"37","line":6,"column":8,"nodeType":"35","messageId":"36","endLine":6,"endColumn":17},{"ruleId":"38","severity":1,"message":"39","line":20,"column":3,"nodeType":"40","messageId":"41","endLine":27,"endColumn":4},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'userEvent' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]